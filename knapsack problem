#include <iostream>
#include <algorithm>
using namespace std;

struct Item {
    int value;
    int weight;
    double ratio;
};

bool compare(Item a, Item b) {
    return a.ratio > b.ratio; 
}

double fractional_knapsack(int weights[], int values[], int W, int n) {
    Item items[n];
    for (int i = 0; i < n; ++i) {
        items[i].value = values[i];
        items[i].weight = weights[i];
        items[i].ratio = static_cast<double>(values[i]) / weights[i];
    }

  
    sort(items, items + n, compare);

    double total_value = 0.0;
    for (int i = 0; i < n; ++i) {
        if (W == 0) {
            break;
        }
        if (items[i].weight <= W) {
            W -= items[i].weight;
            total_value += items[i].value;
        } else {
            total_value += items[i].value * (static_cast<double>(W) / items[i].weight);
            break;
        }
    }
    return total_value;
}

int main() {
    int values[] = {60, 100, 120};
    int weights[] = {10, 20, 30};
    int capacity = 50;
    int n = sizeof(values) / sizeof(values[0]);

  #include <iostream>
#include <algorithm>
using namespace std;

struct Item {
    int value;
    int weight;
    double ratio;
};

bool compare(Item a, Item b) {
    return a.ratio > b.ratio; 
}

double fractional_knapsack(int weights[], int values[], int W, int n) {
    Item items[n];
    for (int i = 0; i < n; ++i) {
        items[i].value = values[i];
        items[i].weight = weights[i];
        items[i].ratio = static_cast<double>(values[i]) / weights[i];
    }

  
    sort(items, items + n, compare);

    double total_value = 0.0;
    for (int i = 0; i < n; ++i) {
        if (W == 0) {
            break;
        }
        if (items[i].weight <= W) {
            W -= items[i].weight;
            total_value += items[i].value;
        } else {
            total_value += items[i].value * (static_cast<double>(W) / items[i].weight);
            break;
        }
    }
    return total_value;
}

int main() {
    int values[] = {60, 100, 120};
    int weights[] = {10, 20, 30};
    int capacity = 50;
    int n = sizeof(values) / sizeof(values[0]);

    double max_value_fractional = fractional_knapsack(weights, values, capacity, n);
    cout << "Maximum value in Fractional Knapsack = " << max_value_fractional << endl;

    return 0;
}

}
